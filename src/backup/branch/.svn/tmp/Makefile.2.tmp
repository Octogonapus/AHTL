CC = icc
PROG = histogram
SRCS = hist_openmp.c sorting.c binary.c uniform.c linear.c timer.c main.c
OBJS = $(SRCS:%.c=%.o)
IXPC_OBJS = $(SRCS:%.c=%.ixpc.o)
SSE_OBJS = $(SRCS:%.c=%.s.o)
AVX_OBJS = $(SRCS:%.c=%.a.o)
MIC_OBJS = $(SRCS:%.c=%.m.o)
MICSGC_OBJS = $(SRCS:%.c=%.msgc.o)
MICSGS_OBJS = $(SRCS:%.c=%.msgs.o)
MICSGI_OBJS = $(SRCS:%.c=%.msgi.o)
SOBJS = $(SRCS:%.c=%.s)
SSE_SOBJS = $(SRCS:%.c=%.s.s)
AVX_SOBJS = $(SRCS:%.c=%.a.s)
MIC_SOBJS = $(SRCS:%.c=%.m.s)
MICSGC_SOBJS = $(SRCS:%.c=%.msgc.s)
MICSGS_SOBJS = $(SRCS:%.c=%.msgs.s)
MICSGI_SOBJS = $(SRCS:%.c=%.msgi.s)
LDFLAGS = -openmp -ipo -lm #-lnuma -littnotify
CFLAGS = 
LIBPATH = #-L/opt/intel/vtune_amplifier_xe/lib64 
INCLUDE = #-I/opt/intel/vtune_amplifier_xe/include/ 

#DEBUG = yes
ifeq (yes, $(DEBUG))
	CFLAGS += -g -O0 $(INCLUDE)
else
	CFLAGS += -fast -openmp -DGET_TIME -DUSE_SAME_TREE -DALL_THREAD_TIME #-DNO_UPDATE 
endif

all: $(PROG) $(PROG)_sse $(PROG)_avx $(SOBJS) $(SSE_SOBJS) $(AVX_SOBJS) $(PROG)_mic   $(PROG)_scalar $(PROG)_mic_sg_char $(PROG)_mic_sg_short $(PROG)_mic_sg_int  $(MIC_SOBJS) $(MICSGC_SOBJS) $(MICSGS_SOBJS) $(MICSGI_SOBJS) a.out 
$(PROG): $(OBJS) 
	$(CC) $(OBJS) -o $(PROG) $(LDFLAGS) $(LIBPATH) 

$(PROG)_scalar: $(IXPC_OBJS) 
	$(CC) $^ -mmic -o $@ $(LDFLAGS) $(LIBPATH) 
	scp $@ mic0:

$(PROG)_sse: $(SSE_OBJS)
	$(CC) $^ -o $@ $(LDFLAGS) $(LIBPATH) 
 
$(PROG)_avx: $(AVX_OBJS)
	$(CC) $^ -o $@ $(LDFLAGS) $(LIBPATH) 

$(PROG)_mic: $(MIC_OBJS)
	$(CC) $^ -mmic -o $@ $(LDFLAGS) $(LIBPATH) 
	scp $@ mic0:

$(PROG)_mic_sg_char: $(MICSGC_OBJS)
	$(CC) $^ -mmic -o $@ $(LDFLAGS) $(LIBPATH) 
	scp $@ mic0:

$(PROG)_mic_sg_short: $(MICSGS_OBJS)
	$(CC) $^ -mmic -o $@ $(LDFLAGS) $(LIBPATH) 
	scp $@ mic0:

$(PROG)_mic_sg_int: $(MICSGI_OBJS)
	$(CC) $^ -mmic -o $@ $(LDFLAGS) $(LIBPATH) 
	scp $@ mic0:

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE)
%.ixpc.o: %.c
	$(CC) $(CFLAGS) -mmic -c $< -o $@ $(INCLUDE)

%.s: %.c
	$(CC) $(CFLAGS) -fsource-asm -S $< -o $@ $(INCLUDE)


%.s.o: %.c
	$(CC) $(CFLAGS) -xSSE -DSIMD -DSSE -c $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 
%.s.s: %.c
	$(CC) $(CFLAGS) -xSSE -DSIMD -DSSE -fsource-asm -S $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 


%.a.o: %.c
	$(CC) $(CFLAGS) -xAVX -DSIMD -DAVX -c $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 
%.a.s: %.c
	$(CC) $(CFLAGS) -xAVX -DSIMD -DAVX -fsource-asm -S $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 


%.m.o: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -c $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 
%.m.s: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -fsource-asm -S $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 


%.msgc.o: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -c $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 -DUSE_GATHER_SCATTER -DBIN_OPT=0
%.msgc.s: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -fsource-asm -S $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 -DUSE_GATHER_SCATTER -DBIN_OPT=0

%.msgs.o: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -c $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 -DUSE_GATHER_SCATTER  -DBIN_OPT=1
%.msgs.s: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -fsource-asm -S $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 -DUSE_GATHER_SCATTER -DBIN_OPT=1

%.msgi.o: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -c $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 -DUSE_GATHER_SCATTER  -DBIN_OPT=2
%.msgi.s: %.c
	$(CC) $(CFLAGS) -mmic -DSIMD -fsource-asm -S $< -o $@ -mCG_use_unaligned_loads=0 -mCG_use_unaligned_stores=0 -DUSE_GATHER_SCATTER -DBIN_OPT=2 


a.out: $(SRCS)
	icc timer.c hist_openmp.c hist_method_test.c sorting.c binary.c uniform.c linear.c -DSIMD -DAVX -openmp -DGET_TIME	

clean :
	rm *.o *.s $(PROG) $(PROG)_scalar $(PROG)_sse $(PROG)_avx $(PROG)_mic $(PROG)_mic_sg_char $(PROG)_mic_sg_short $(PROG)_mic_sg_int
