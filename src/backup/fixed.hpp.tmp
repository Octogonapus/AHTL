#include"histogram.h"
#include<iostream>

int hist_uniform_float 
(
 float * data,
 float base, 
 float width,
 int count,
 int * bin,
 int bin_size
 );

int hist_uniform_float_simd_unrolled_4 
(
 float * data, 
 float base, 
 float width,
 int count,
 int * bin,
 int bin_size 
 );

int hist_uniform_float_atomic 
(
 float * data,
 float base, 
 float width,
 int count,
 int * bin 
);
namespace AHTL{
  template <typename T>
  void FixedHistogram<T>::DoSample()
  {
  }

  template <typename T>
  void FixedHistogram<T>::BuildHistogram()
  {

  }

  template <typename T>
  void FixedHistogram<T>::BuildHistogramBoundaryCheck()
  {

  }

  template <typename T>
  void FixedHistogram<T>::BuildHistogramPrivate()
  {
    int i;
      for(i = 0; i < Histogram<T>::data_size_; i++)
        Histogram<T>::bin_[(unsigned int)(((Histogram<T>::data_[i]) - bin_base_) / bin_width_)]++;
  }

#ifdef __MIC__
  void FixedHistogram<float>::BuildHistogramPrivate()
  {
    hist_uniform_float_simd_unrolled_4(data_, bin_base_, bin_width_, data_size_, bin_, num_bins_);  
  }
#else
  void FixedHistogram<float>::BuildHistogramPrivate()
  {
    hist_uniform_float(data_, bin_base_, bin_width_, data_size_, bin_, num_bins_);  
  }
#endif

  template <typename T>
  void FixedHistogram<T>::BuildHistogramShared()
  {
    int i;
      for(i = 0; i < data_size_; i++)
        __sync_fetch_and_add(&bin_[(int)(((data_[i]) - bin_base_) / bin_width_)], 1);
  }

  void FixedHistogram<float>::BuildHistogramShared()
  {
    hist_uniform_float_atomic(data_, bin_base_, bin_width_, data_size_, bin_);  
  }
}

